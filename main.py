import asyncio
import logging
import os
import sys

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ---
TOKEN = os.getenv("TOKEN", "7546219321:AAEyiWUNii7cl-vxvCSh7pSj0fGhSzXoyQ4")  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–õ–ê–í–Ü–ê–¢–£–†–ò ---
main_menu_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text="üó∫Ô∏è –ó —á–æ–≥–æ –ø–æ—á–∞—Ç–∏? –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø–ª–∞–Ω", callback_data="step_by_step_plan")],
    [types.InlineKeyboardButton(text="üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏", callback_data="structure")],
    [types.InlineKeyboardButton(text="‚úçÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è (–î–°–¢–£)", callback_data="formatting_rules")],
    [types.InlineKeyboardButton(text="üìö –î–µ —à—É–∫–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞?", callback_data="sources")],
    [types.InlineKeyboardButton(text="üî• –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data="personal_consultation")],
])
back_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="back_to_main_menu")]
])

# --- –•–ï–ù–î–õ–ï–†–ò ---

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    welcome_message = (
        f"–ü—Ä–∏–≤—ñ—Ç, {hbold(message.from_user.full_name)}!\n\n"
        "–Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ –∫—É—Ä—Å–æ–≤–∏—Ö —Ä–æ–±—ñ—Ç. üß≠\n\n"
        "–ß–∏–º —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏? –û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –ø—É–Ω–∫—Ç—ñ–≤ –Ω–∏–∂—á–µ:"
    )
    await message.answer(welcome_message, reply_markup=main_menu_keyboard)

@dp.callback_query(F.data == "back_to_main_menu")
async def process_back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ß–∏–º —â–µ —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏? –û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –ø—É–Ω–∫—Ç—ñ–≤ –Ω–∏–∂—á–µ:",
        reply_markup=main_menu_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "step_by_step_plan")
async def process_step_by_step_plan(callback: CallbackQuery):
    text = (
        f"{hbold('üó∫Ô∏è –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø–ª–∞–Ω –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∫—É—Ä—Å–æ–≤–æ—ó:')}\n\n"
        "1. –í–∏–±—ñ—Ä —Ç–µ–º–∏.\n2. –ü–ª–∞–Ω.\n3. –î–∂–µ—Ä–µ–ª–∞.\n4. –¢–µ–æ—Ä—ñ—è.\n5. –ü—Ä–∞–∫—Ç–∏–∫–∞.\n6. –í—Å—Ç—É–ø —ñ –≤–∏—Å–Ω–æ–≤–∫–∏.\n7. –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è.\n8. –ü–ª–∞–≥—ñ–∞—Ç.\n9. –ó–¥–∞—á–∞."
    )
    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "structure")
async def process_structure(callback: CallbackQuery):
    text = (
        f"{hbold('üèóÔ∏è –¢–∏–ø–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏:')}\n\n"
        f"üîπ {hbold('–¢–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞')}\nüîπ {hbold('–ó–º—ñ—Å—Ç')}\nüîπ {hbold('–í—Å—Ç—É–ø')}\nüîπ {hbold('–†–æ–∑–¥—ñ–ª 1')}\n"
        f"üîπ {hbold('–†–æ–∑–¥—ñ–ª 2')}\nüîπ {hbold('–í–∏—Å–Ω–æ–≤–∫–∏')}\nüîπ {hbold('–°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª')}\nüîπ {hbold('–î–æ–¥–∞—Ç–∫–∏')}"
    )
    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "formatting_rules")
async def process_formatting(callback: CallbackQuery):
    text = (
        f"{hbold('‚úçÔ∏è –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è (–î–°–¢–£):')}\n\n"
        f"‚ñ™Ô∏è {hbold('–®—Ä–∏—Ñ—Ç:')} Times New Roman, 14\n"
        f"‚ñ™Ô∏è {hbold('–Ü–Ω—Ç–µ—Ä–≤–∞–ª:')} 1.5\n"
        f"‚ñ™Ô∏è {hbold('–ü–æ–ª—è:')} –ª—ñ–≤–µ ‚Äì 30 –º–º, –ø—Ä–∞–≤–µ ‚Äì 10 –º–º\n"
        f"‚ñ™Ô∏è {hbold('–ù—É–º–µ—Ä–∞—Ü—ñ—è:')} —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç—ñ\n"
        f"‚ñ™Ô∏è {hbold('–ó–∞–≥–æ–ª–æ–≤–∫–∏:')} –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É"
    )
    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "sources")
async def process_sources(callback: CallbackQuery):
    text = (
        f"{hbold('üìö –î–µ —à—É–∫–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞:')}\n\n"
        f"üîó {hbold('Google Scholar')} ‚Äî scholar.google.com\n"
        f"üîó {hbold('Academia.edu')} ‚Äî –Ω–∞—É–∫–æ–≤—ñ —Ä–æ–±–æ—Ç–∏\n"
        f"üîó {hbold('–ù–ë–£ —ñ–º. –í–µ—Ä–Ω–∞–¥—Å—å–∫–æ–≥–æ')} ‚Äî nbuv.gov.ua\n"
        f"üîó {hbold('–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å—å–∫—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏')} ‚Äî –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
    )
    await callback.message.edit_text(text, reply_markup=back_keyboard, disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(F.data == "personal_consultation")
async def process_personal_consultation(callback: CallbackQuery):
    YOUR_USERNAME = "@yurij2000"
    text = (
        f"{hbold('üî• –ü–æ—Ç—Ä—ñ–±–Ω–∞ –æ—Å–æ–±–∏—Å—Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞?')}\n\n"
        "–Ø–∫—â–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ—Ä–∞–¥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞–ø—Ä—è–º—É:\n\n"
        f"üìû {hbold('–ú—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç:')} {YOUR_USERNAME}\n\n"
        "–û–±–≥–æ–≤–æ—Ä–∏–º–æ –¥–µ—Ç–∞–ª—ñ —É –ø—Ä–∏–≤–∞—Ç—ñ."
    )
    await callback.message.edit_text(text, reply_markup=back_keyboard)
    await callback.answer(text="–ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –¥–æ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!", show_alert=True)

# --- –ó–ê–ü–£–°–ö ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
